{"version":3,"sources":["Components/Header.js","Components/Footer.js","Components/Cake.js","Components/CakeDetail.js","API.js","Components/CakeForm.js","Components/Intro.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","title","className","Footer","Cake","cake","selectCake","onClick","src","imageUrl","alt","name","CakeDetail","clearSelection","comment","yumFactor","baseUrl","fetch","then","resp","json","newCake","method","headers","body","JSON","stringify","CakeForm","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","API","addCakeToList","onChange","this","type","placeholder","React","Component","Intro","App","cakes","selected_cake","addCake","setCakes","data","setSelectedCake","window","scrollTo","showCakeForm","map","key","id","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef864343.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n\n    const {title} = props;\n\n        return (\n            <div className=\"header\">\n                <h1>{title}</h1>\n            </div>\n        )\n    }\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => {\n\n        return (\n            <div className=\"footer\">Â© Copyright - Will Bush</div>\n        )\n    }\n\nexport default Footer;\n\n\n\n","import React from 'react';\n\nconst Cake = (props) => {\n    const {cake, selectCake} = props;\n    return (\n        <div className=\"cake-list\" onClick={() => selectCake(cake)}>\n            <img className=\"preview\" src={cake.imageUrl} alt={cake.name}/>\n            <h3>{cake.name}</h3>\n        </div>\n    )\n}\n\nexport default Cake;","import React from 'react';\n\nconst CakeDetail = (props) => {\n    const {cake, clearSelection } = props;\n        return (\n            <div className=\"detail\">\n                <p>You are viewing {cake.name}!</p>\n                <img className=\"detail-image\"src={cake.imageUrl} alt={cake.name}/>\n                <h2>{cake.name}</h2>\n                <p><b>Comment:</b> {cake.comment}</p>\n                <p><b>Yum Factor:</b> {cake.yumFactor}/5</p>\n                <button className=\"button-red\" onClick={() => clearSelection()}>Return to Menu</button>\n            </div>\n        )\n    }\n\nexport default CakeDetail;","const baseUrl = \"https://ec2-34-243-153-154.eu-west-1.compute.amazonaws.com:5000/api/cakes\"\n\nconst getCakes = () => {\n    return fetch(baseUrl)\n    .then(resp => resp.json())\n    }\n\nconst postCake = (newCake) => \n    fetch(baseUrl, {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newCake)\n    }).then(resp => resp.json())\n\nexport default {getCakes, postCake}","import React from 'react';\nimport API from '../API'\n\nclass CakeForm extends React.Component {\n\n    state = {\n        name: \"\",\n        comment: \"\",\n        imageUrl: \"\",\n        yumFactor: 0\n    }\n\n    handleChange = event => this.setState({ [event.target.name]: event.target.value })\n        \n    handleSubmit = event => {\n        event.preventDefault();\n        API.postCake(this.state)\n        .then((resp) => this.props.addCakeToList(resp))\n    }\n\n    render() {\n        return (\n\n            <div className=\"form-group\">\n                <h3>Add a new cake!</h3>\n                <form>\n                    <div>\n                        <input onChange={this.handleChange} type=\"text\" name=\"name\" placeholder=\"Enter a Cake Name\" value={this.state.name} /><br/>\n                        <input onChange={this.handleChange} type=\"text\" name=\"comment\" placeholder=\"Enter a Cake Comment\" value={this.state.comment} /><br/>\n                        <input onChange={this.handleChange} type=\"text\" name=\"imageUrl\" placeholder=\"Enter an Image URL\" value={this.state.imageUrl} /><br/>\n                        <select name=\"yumFactor\" placeholder=\"Choose a Yum Factor\" value={this.state.value} onChange={this.handleChange}>\n                            <option value=\"+1\">1</option>\n                            <option value=\"+2\">2</option>\n                            <option value=\"+3\">3</option>\n                            <option value=\"+4\">4</option>\n                            <option value=\"+5\">5</option>\n                        </select><br/>\n                        <input onClick={this.handleSubmit} type=\"submit\" placeholder=\"Submit\"/>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n        \nexport default CakeForm;","import React from 'react';\n\nconst Intro = () => {\n\n    return (\n        <div>\n            <h2>Welcome to Cake App!</h2>\n            <p>Please select a cake from the menu, or click \"Add a New Cake\".</p>\n        </div>\n    )\n}\n\nexport default Intro;\n\n\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Cake from './Components/Cake';\nimport CakeDetail from './Components/CakeDetail';\nimport CakeForm from './Components/CakeForm';\nimport Intro from './Components/Intro';\nimport API from './API';\n\nclass App extends React.Component {\n\n  state = {\n    cakes: [],\n    selected_cake: null,\n    addCake: false\n  }\n\n  componentDidMount() {\n    API.getCakes()\n    .then((cakes) => this.setCakes(cakes))\n  }\n\n  // SETS AN ARRAY OF CAKES IN STATE\n  setCakes = data => {\n    this.setState({\n      cakes: data\n    })\n  }\n\n   // SETS A SINGLE CAKE AS BEING \"SELECTED\" IN STATE\n   setSelectedCake = cake => {\n    this.setState({\n      selected_cake: cake,\n      addCake: false\n    })\n    window.scrollTo(0,0);\n  }\n\n  // SHOWS A FORM FOR ADDING A NEW CAKE\n  showCakeForm = () => {\n    this.setState({\n      addCake: true\n    })\n    this.clearSelection();\n  }\n\n  // TAKES THE RESPONSE FROM A NEW CAKE POST REQUEST\n  // AND ADDS THE NEW CAKE TO THE ARRAY OF CAKES HELD IN STATE\n  addCakeToList = (newCake) => {\n    this.setState({\n      cakes: [...this.state.cakes, newCake],\n      selected_cake: newCake,\n      addCake: false\n    })\n\n  }\n\n  // REMOVES A SINGLE CAKE FROM BEING \"SELECTED\" IN STATE\n  clearSelection = () => {\n    this.setState({\n      selected_cake: null\n    })\n  }\n\n  render() {\n  \n  return (\n    <div className=\"App\">\n      <Header title=\"Cake App\"/>\n        <div className=\"main-container\">\n          <div className=\"cakes\">\n          <h3>Select a Cake</h3>\n          <p>or</p>\n            {/* BUTTON ALLOWS USER TO ADD A NEW CAKE */}\n            <button className=\"button-green\" onClick={() => this.showCakeForm()}>Add a New Cake</button>\n            {this.state.cakes ? this.state.cakes.map(cake => <Cake cake={cake} selectCake={this.setSelectedCake} key={cake.id}/>) : null}\n          </div>\n          <div className=\"main\">\n            {/* INSTRUCTS USER TO SELECT A CAKE OR ADD A NEW CAKE  */}\n            { !this.state.selected_cake && !this.state.addCake ? <Intro/>\n            : null }\n            {/* SHOWS A DETAILED VIEW OF THE SELECTED CAKE */}\n            {this.state.selected_cake ? <CakeDetail cake={this.state.selected_cake} clearSelection={this.clearSelection}/>\n            : null }\n            {/* SHOWS A FORM TO ADD A NEW CAKE */}\n            {this.state.addCake ?<CakeForm addCakeToList={this.addCakeToList}/>\n            : null }\n          </div>\n        </div>\n      <Footer/>\n    </div>\n  );\n}};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}